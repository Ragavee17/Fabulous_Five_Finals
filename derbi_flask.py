# -*- coding: utf-8 -*-
"""Derbi_Flask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LQQ8IdIV_WOkwaGtD_Nspi4KlVmg0vx8
"""

#!pip install flask-ngrok

import tensorflow

import os
import uuid
import flask
import urllib
from PIL import Image
from tensorflow.keras.models import load_model
from flask import Flask , render_template  , request , send_file, jsonify
from tensorflow.keras.preprocessing.image import load_img , img_to_array
from flask_ngrok import run_with_ngrok

import glob
from IPython.display import Image, display

#!pip install fastai
from fastai.vision import *

#Accessing COVID19 data
path1 = Path('/content/drive/MyDrive/derbi_data/Covid_tvt/')
data1 = ImageDataBunch.from_folder(path1, size=224, num_workers=4).normalize(imagenet_stats)

#Accessing Cancer data
path2 = Path('/content/drive/MyDrive/derbi_data/Can_data/')
data2 = ImageDataBunch.from_folder(path2, size=224, num_workers=4).normalize(imagenet_stats)

#Accessing TB data
path3 = Path('/content/drive/MyDrive/derbi_data/TB_data/')
data3 = ImageDataBunch.from_folder(path3, size=224, num_workers=4).normalize(imagenet_stats)

#Creating fastai resnet34 model for Covid-19
from fastai.metrics import error_rate
learn1=create_cnn(data1,models.resnet34, metrics=error_rate)
learn1.load('/content/drive/MyDrive/derbi_model_zip/Covid_best_resnet34')

#Creating fastai resnet34 model for Cancer
learn2=create_cnn(data2, models.resnet34, metrics=error_rate)
learn2.load('/content/drive/MyDrive/derbi_model_zip/Caner_best_resnet34')

#Creating fastai resnet34 model for TB
learn3=create_cnn(data3, models.resnet34, metrics=error_rate)
learn3.load('/content/drive/MyDrive/derbi_model_zip/TB2_op_best_resnet34')

import numpy as np
import cv2

#for converting nested list to normal flat list
def flatten(li):
    return sum(([x] if not isinstance(x, list) else flatten(x)
                for x in li), [])

import glob
from IPython.display import Image, display



#Creating Flask framework
import html
app=Flask(__name__,template_folder="template")
run_with_ngrok(app)
@app.route('/',methods=['GET'])
def index():
  return render_template('index.html')

@app.route('/submit',methods=['GET','POST'])
def predict():
  imagefile=request.files['my_image']
  image_path='/image/'+imagefile.filename
  imagefile.save(image_path)
  for imageName in glob.glob(image_path):
    lis=[]
    img = open_image(imageName)
    prediction1 = learn1.predict(img)
    prediction2 = learn2.predict(img)
    prediction3 = learn3.predict(img)
    lis.append(prediction1[2].tolist())
    lis.append(prediction2[2].tolist())
    lis.append(prediction3[2].tolist())
    lis=flatten(lis)
    cls=max(lis)
    if cls==lis[2]:
      lis[2]=lis[2]-0.35
      ans=max(lis)
    else:
      ans=max(lis)
    na1="The probability of COVID19  ="+str(lis[0])
    na2="The probability of non covid19 condition ="+str(lis[1])
    na3="The probability of Adenocarcinoma  ="+str(lis[2])
    na4="The probability of large call caarcinoma  ="+str(lis[3])
    na5="The probability of non cancer condition ="+str(lis[4])
    na6="The probability of Squamous cell carcinoma  ="+str(lis[5])
    na7="The probability of non tuberculosis condition  ="+str(lis[6])
    na8="The probability of Tuberculosis  ="+str(lis[7])
    ans_lis=[na1,na2,na3,na4,na5,na6,na7,na8]
    if ans==lis[0]:
      ans_lis.append("FINAL RESULT: COVID 19 POSITIVE")
    elif ans==lis[1]:
      ans_lis.append("FINAL RESULT: COVID 19 NEGATIVE [ NORMAL IMAGE ]")
    elif ans==lis[2]:
      ans_lis.append("FINAL RESULT: ADENOCARCINOMA")
    elif ans==lis[3]:
      ans_lis.append("FINAL RESULT: LARGE CELL CARCINOMA")
    elif ans==lis[4]:
      ans_lis.append("FINAL RESULT: NO CANCER [ NORMAL IMAGE ] ")
    elif ans==lis[5]:
      ans_lis.append("FINAL RESULT: SQUAMOUS CELL CARCINOMA")
    elif ans==lis[6]:
      ans_lis.append("FINAL RESULT: NO TUBERCULOSIS [ NORMAL IMAGE ]")
    else:
      ans_lis.append("FINAL RESULT: TUBERCULOSIS")
    pred={
        'pre1':ans_lis[0],
        'pre2':ans_lis[1],
        'pre3':ans_lis[2],
        'pre4':ans_lis[3],
        'pre5':ans_lis[4],
        'pre6':ans_lis[5],
        'pre7':ans_lis[6],
        'pre8':ans_lis[7],
        'pre9':ans_lis[8]       
    }
    return render_template('success.html',p1=pred['pre1'],p2=pred['pre2'],p3=pred['pre3'],p4=pred['pre4'],
                           p5=pred['pre5'],p6=pred['pre6'],p7=pred['pre7'],p8=pred['pre8'],p9=pred['pre9'])

if __name__=='__main__':
  app.run()

